#version 440

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;


/*------------------------------------------------------------------------------------------------
Description:
    Stores info about a single particle.  Must match the version on the CPU side.
Creator:    John Cox (9-25-2016)
------------------------------------------------------------------------------------------------*/
struct Particle
{
    vec4 _pos;
    vec4 _vel;
    vec4 _netForceThisFrame;
    int _collisionCountThisFrame;
    float _mass;
    float _radiusOfInfluence;
    unsigned int _indexOfNodeThatItIsOccupying;
    int _isActive;
};

/*------------------------------------------------------------------------------------------------
Description:
    Contains the 30bit Morton Code of a single particle's 3D position and the index of the 
    particle that it originally referred to.  There is one of these for each particle.   

    Note: I could have put the Morton Code within each particle, but I didn't want to haul 
    sorting information around with each particle, so I made these intermediate structures.  The 
    sorting will move them around, so they need to store the index of the particle for which 
    they were originally created.
Creator:    John Cox, 2/2017
------------------------------------------------------------------------------------------------*/
struct ParticleMortonCode
{
    uint _particleIndex;
    uint _mortonCode;
};

/*------------------------------------------------------------------------------------------------
Description:
    The SSBO that contains all the particles that this simulartion is running.  Rather 
    self-explanatory.
    
    Binding points are relevant only to a particular shader (that is, not to the OpenGL context 
    as a whole) and are set in the SSBO's ConfigureCompute(...) function.
Creator:    John Cox (9-25-2016)
------------------------------------------------------------------------------------------------*/
uniform uint uMaxParticles;
layout (std430) buffer ParticleBuffer
{
    Particle AllParticles[];
};

/*------------------------------------------------------------------------------------------------
Description:
    The particle copy SSBO.  Particles are being sorted in parallel, so swapping 
    ("A = dest; dest = src; src = dest;") is out.  The particles must be copied as is, their 
    Morton Codes will be sorted, then the particles will be placed back into the particle buffer 
    in a sorted fashion.

    Note: This is the same size as ParticleBuffer, so no additional "max size" variable.
Creator:    John Cox, 2/20177
------------------------------------------------------------------------------------------------*/
layout (std430) buffer ParticleCopyBuffer
{
    Particle CopyAllParticles[];
};

/*------------------------------------------------------------------------------------------------
Description:
    Same size as ParticleBuffer.
Creator:    John Cox, 2/2017
------------------------------------------------------------------------------------------------*/
layout (std430) buffer MortonCodeBuffer
{
    ParticleMortonCode MortonCodesByParticle[];
};

/*------------------------------------------------------------------------------------------------
Description:
    Copied from 
    https://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/

    This does some bit magic that I don't understand.  A 10bit integer is expanded (bit-magicked) into 30 bits in such a way that it is read for interleaving with two other sets of "expanded" 10bit integers.
Parameters: 
    i   An unsigned integer within the range 0-1023 (2^10 - 1).
Returns:    
    A 30bit bit version of the input.
Creator:    John Cox, 2/2017
------------------------------------------------------------------------------------------------*/
uint ExpandBits(uint i)
{
    uint expandedI = i;

    // bit magic (I don't know what it is doing)
    expandedI = (expandedI * 0x00010001u) & 0xFF0000FFu;    // 0b11111111000000000000000011111111
    expandedI = (expandedI * 0x00000101u) & 0x0F00F00Fu;    // 0b00001111000000001111000000001111
    expandedI = (expandedI * 0x00000011u) & 0xC30C30C3u;    // 0b11000011000011000011000011000011
    expandedI = (expandedI * 0x00000005u) & 0x49249249u;    // 0b01001001001001001001001001001001
    
    return expandedI;
}

/*------------------------------------------------------------------------------------------------
Description:
    Interleaves 10-bit versions of the input's X, Y, and Z values into a 30bit code.
    Since only 30 bits out of the integer's 32 are used, then signed integers could be used here 
    EXCEPT that the Morton Code sorting will be using "radix sort", a sorting algorithm that 
    requires unsigned integers.  So use unsigned integers.

    A brief visual of the interleaving can be found here:
    http://www.forceflow.be/2013/10/07/morton-encodingdecoding-through-bit-interleaving-implementations/

    Like ExpandBits(...), this code is also copied from 
    https://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/
Parameters: 
    A position vector (vec4).
Returns:    
    A 30bit unsigned int Morton Code.
Creator:    John Cox, 2/2017
------------------------------------------------------------------------------------------------*/
uint Morton3D(const vec4 pos)
{
    // convert X, Y, and Z into 10bit unsigned integers
    // Note: This means no negative values.  
    // - Extract the positions from the vector (ignore the W, which will distort the normalizing 
    //  if it is non-0)
    // - Normalize them to the range (-1,+1) on each axis.  
    // - Add 1 to each axis to bring them to the range (0,+2) on each axis.
    // - Multiply each axis by 0.5 to bring them to the range (0,+1).
    // - Multiply each axis by 1023.0f to make a float on the range (0,1023).
    // - Cast to unsigned int.
    // - VOILA!  All particle positions are now 10bit unsigned integers.
    // Also Note: With a resolution of only 1024 for all particles, it is possible that two or 
    // more particles that are very close to each other will end up with the same Morton Code.  
    // This is ok.  Two particles that are right on top of each other SHOULD have very close 
    // codes, if not identical.  They will be colliding with each other in the next summoning of 
    // the particle collision handler.

    // extract things that aren't W
    vec3 posOnly = pos.xyz;

    // normalize it
    float magnitudeSquared = dot(posOnly, posOnly);
    posOnly = posOnly * inversesqrt(magnitudeSquared);

    // reduce from range (-1,+1) on each axis to (0,+1) on each axis
    // Note: If this particle is only in 2D, then Z will be 0, but after this operation it will 
    // be +0.5f.  This is ok because all the particles will have the same Z value going into 
    // their Morton Code, which in turn means that it will be irrelevant when sorting them.
    posOnly = (posOnly + vec3(+1,+1,+1)) * 0.5f;

    // now expanded to 30bit values apiece
    unsigned int xx = ExpandBits(uint(posOnly.x));
    unsigned int yy = ExpandBits(uint(posOnly.y));
    unsigned int zz = ExpandBits(uint(posOnly.z));

    // and interleave to make the final Morton Code

    return (xx *4) + (yy * 2) + zz;
}

/*------------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.
Parameters: None
Returns:    None
Creator:    John Cox, 2/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= uMaxParticles)
    {
        // no particle for this thread
        return;
    }

    // at this time, the code structure's index will be the same as the particle's, but after 
    // sorting it very likely won't be, so the index around for after sorting
    ParticleMortonCode theCode;
    theCode._particleIndex = index;
    theCode._mortonCode = Morton3D(AllParticles[index]._pos);

    MortonCodesByParticle[index] = theCode;

    // now copy the particle into the temporary buffer so that, after sorting the codes and 
    // determining where the particle should be, it can be copied straight in without having to 
    // worry about what was there before
    CopyAllParticles[index] = AllParticles[index];
}
