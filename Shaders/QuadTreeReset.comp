#version 440

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

/*------------------------------------------------------------------------------------------------
Description:
    Contains all info necessary for a single node of the quad tree.  It is a dumb container 
    meant for use only by ParticleQuadTree.
Creator:    John Cox (12-17-2016)
------------------------------------------------------------------------------------------------*/
const uint MAX_PARTICLES_PER_NODE = 100;
struct ParticleQuadTreeNode
{
    // this array size MUST match the value specified on the CPU side
    int _indicesForContainedParticles[MAX_PARTICLES_PER_NODE];
    int _numCurrentParticles;

    int _inUse;
    int _isSubdivided;
    uint _childNodeIndexTopLeft;
    uint _childNodeIndexTopRight;
    uint _childNodeIndexBottomRight;
    uint _childNodeIndexBottomLeft;

    // left and right edges implicitly X, top and bottom implicitly Y
    float _leftEdge;
    float _topEdge;
    float _rightEdge;
    float _bottomEdge;

    uint _neighborIndexLeft;
    uint _neighborIndexTopLeft;
    uint _neighborIndexTop;
    uint _neighborIndexTopRight;
    uint _neighborIndexRight;
    uint _neighborIndexBottomRight;
    uint _neighborIndexBottom;
    uint _neighborIndexBottomLeft;
};

/*------------------------------------------------------------------------------------------------
Description:
    The SSBO that contains all the ParticleQuadTreeNodes that this simulation is running.  
    Rather self-explanatory.
Creator:    John Cox (1-10-2017)
------------------------------------------------------------------------------------------------*/
uniform uint uMaxNodes;
uniform uint uNumStartingNodes;
layout (std430) buffer QuadTreeNodeBuffer
{
    ParticleQuadTreeNode AllQuadTreeNodes[];
};

/*------------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.
Parameters: None
Returns:    None
Creator:    John Cox (1-10-2017)
------------------------------------------------------------------------------------------------*/
void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= uMaxNodes)
    {
        return;
    }

    // make a copy of the node, update its info, and write it back
    ParticleQuadTreeNode node = AllQuadTreeNodes[index];

    // don't bother resetting the particle indices to 0 because they'll be run over the next 
    // time that the node is populated with particles
    node._numCurrentParticles = 0;

    // no subdivision by default
    node._isSubdivided = 0;

    node._childNodeIndexTopLeft = -1;
    node._childNodeIndexTopRight = -1;
    node._childNodeIndexBottomRight = -1;
    node._childNodeIndexBottomLeft = -1;

    if (index >= uNumStartingNodes)
    {
        node._inUse = 0;
    }

    // write it back
    AllQuadTreeNodes[index] = node;
    
}
