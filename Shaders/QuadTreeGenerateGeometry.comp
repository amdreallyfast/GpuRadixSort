#version 440

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout (binding = 4, offset = 0) uniform atomic_uint acPolygonFacesInUse;
layout (binding = 4, offset = 4) uniform atomic_uint acPolygonFacesCrudeMutex;

/*------------------------------------------------------------------------------------------------
Description:
    Contains all info necessary for a single node of the quad tree.  It is a dumb container 
    meant for use only by ParticleQuadTree.
Creator:    John Cox (12-17-2016)
------------------------------------------------------------------------------------------------*/
const uint MAX_PARTICLES_PER_NODE = 100;
struct ParticleQuadTreeNode
{
    // this array size MUST match the value specified on the CPU side
    uint _indicesForContainedParticles[MAX_PARTICLES_PER_NODE];
    uint _numCurrentParticles;

    int _inUse;
    int _isSubdivided;
    uint _childNodeIndexTopLeft;
    uint _childNodeIndexTopRight;
    uint _childNodeIndexBottomRight;
    uint _childNodeIndexBottomLeft;

    // left and right edges implicitly X, top and bottom implicitly Y
    float _leftEdge;
    float _topEdge;
    float _rightEdge;
    float _bottomEdge;

    uint _neighborIndexLeft;
    uint _neighborIndexTopLeft;
    uint _neighborIndexTop;
    uint _neighborIndexTopRight;
    uint _neighborIndexRight;
    uint _neighborIndexBottomRight;
    uint _neighborIndexBottom;
    uint _neighborIndexBottomLeft;
};

/*------------------------------------------------------------------------------------------------
Description:
    Stores all info necessary to draw a single vertex.  This is used for drawing the quad tree's 
    wireframe.
Creator:    John Cox (6-12-2016)
------------------------------------------------------------------------------------------------*/
struct MyVertex
{
    vec4 _pos;

    // ignored for the quad tree wireframe
    vec4 _normal;
};

/*------------------------------------------------------------------------------------------------
Description:
    This is a simple structure that describes the face of a 2D polygon.  The face begins at P1 
    and ends at P2.  In this demo, the normal will be used to calculate collisions.
Creator:    John Cox (9-8-2016)
------------------------------------------------------------------------------------------------*/
struct PolygonFace
{
    MyVertex _start;
    MyVertex _end;
};

/*------------------------------------------------------------------------------------------------
Description:
    The SSBO that contains all the ParticleQuadTreeNodes that this simulation is running.  
    Rather self-explanatory.
Creator:    John Cox (1-10-2017)
------------------------------------------------------------------------------------------------*/
uniform uint uMaxNodes;
layout (std430) buffer QuadTreeNodeBuffer
{
    ParticleQuadTreeNode AllNodes[];
};

/*------------------------------------------------------------------------------------------------
Description:
    The SSBO that will contain all polygons necessary to draw the quad tree.  For this demo, it 
    is only 2D, so each face only contains two vertexes;
Creator:    John Cox (9-25-2016)
------------------------------------------------------------------------------------------------*/
uniform uint uMaxPolygonFaces;
layout (std430) buffer QuadTreeFaceBuffer
{
    PolygonFace AllPolygonFaces[];
};


/*------------------------------------------------------------------------------------------------
Description:
    Acquires 4 new copies of faces from the AllPolygonFaces buffer, fills them out, and copies 
    them back in where they were found.  An atomic counter is used to make sure that each 
    invocation of this shader aquires unique indices for each face.
Parameters:
    nodeIndex   Generate faces for this quad tree node.
Returns:
    True if all went well, false if there weren't enough faces left in the array.
Creator:    John Cox (2-13-2016)
------------------------------------------------------------------------------------------------*/
bool GenerateFacesForNode(uint nodeIndex)
{
    // attempt to avoid array overrun
    if (atomicCounter(acPolygonFacesInUse) > (uMaxPolygonFaces - 4))
    {
        return false;
    }

    // acquire 4 new faces
    uint face1Index = atomicCounterIncrement(acPolygonFacesInUse);
    uint face2Index = atomicCounterIncrement(acPolygonFacesInUse);
    uint face3Index = atomicCounterIncrement(acPolygonFacesInUse);
    uint face4Index = atomicCounterIncrement(acPolygonFacesInUse);

    // this node has been accessed enough by this time that it's probably in the cache, so don't 
    // make a copy of the whole node and instead just look up the edges 
    float nodeTop = AllNodes[nodeIndex]._topEdge;
    float nodeRight = AllNodes[nodeIndex]._rightEdge;
    float nodeBottom = AllNodes[nodeIndex]._bottomEdge;
    float nodeLeft = AllNodes[nodeIndex]._leftEdge;

    vec4 topLeft = vec4(nodeLeft, nodeTop, 0, 1);
    vec4 topRight = vec4(nodeRight, nodeTop, 0, 1);
    vec4 bottomRight = vec4(nodeRight, nodeBottom, 0, 1);
    vec4 bottomLeft = vec4(nodeLeft, nodeBottom, 0, 1);

    // make copies of each new face, set their values, and then write them back
    PolygonFace face1Copy = AllPolygonFaces[face1Index];
    PolygonFace face2Copy = AllPolygonFaces[face2Index];
    PolygonFace face3Copy = AllPolygonFaces[face3Index];
    PolygonFace face4Copy = AllPolygonFaces[face4Index];

    // the quad tree will be rendered in wireframe only, so don't bother calculating or 
    // otherwise setting the normal

    // face 1 is across the top 
    face1Copy._start._pos = topLeft;
    face1Copy._end._pos = topRight;

    // face 2 is across the right 
    face2Copy._start._pos = topRight;
    face2Copy._end._pos = bottomRight;

    // face 3 is across the bottom
    face3Copy._start._pos = bottomRight;
    face3Copy._end._pos = bottomLeft;

    // face 4 is across the left
    face4Copy._start._pos = bottomLeft;
    face4Copy._end._pos = topLeft;

    // write them back
    AllPolygonFaces[face1Index] = face1Copy;
    AllPolygonFaces[face2Index] = face2Copy;
    AllPolygonFaces[face3Index] = face3Copy;
    AllPolygonFaces[face4Index] = face4Copy;

    // all went well
    return true;
}

/*------------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.  
Parameters: None
Returns:    None
Creator:    John Cox (1-16-2017)
------------------------------------------------------------------------------------------------*/
void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= uMaxNodes)
    {
        return;
    }

    if (AllNodes[index]._inUse == 0)
    {
        return;
    }

    GenerateFacesForNode(index);
}

