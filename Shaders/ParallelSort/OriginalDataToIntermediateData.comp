// REQUIRES Version.comp
// REQUIRES ParallelSortConstants.comp
// - PARALLEL_SORT_WORK_GROUP_SIZE_X
// REQUIRES SsboBufferBindings.comp
// REQUIRES UniformLocations.comp
// REQUIRES OriginalDataBuffer.comp
// REQUIRES IntermediateSortBuffers.comp

// Y and Z work group sizes default to 1
layout (local_size_x = PARALLEL_SORT_WORK_GROUP_SIZE_X) in;

/*------------------------------------------------------------------------------------------------
Description:
    Adapt to whatever needs to be sorted as necessary.

    The original data that needs to be sorted may not be a simple set of integers, but rather 
    structures that have integers, floatas, and vec4s and are very unwieldy to move around after 
    every prefix scan during the Radix Sort.  This shader takes the original data and fills out 
    a simple, intermediate structure that is much more easily moved around.
Parameters: None
Returns:    None
Creator:    John Cox, 3/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    // Note: The number of items in each half of IntermediateSortBuffers is equivalent to the 
    // number of items in the PrefixScanBuffer::PrefixSumsWithinGroup, which will likely exceed 
    // the size of the user-provided data.  The number of threads is managed by 
    // ParallelSort::Sort() to be the same as the number of data entries that need to be filled 
    // out, so if the thread ID is greater than the number of user-provided data entries, pad 
    // out the IntermediateData with values of max uint.
    // Also Note: Pad with max integer instead of 0s because the sorting will put items with the 
    // smallest value first, but entries that don't refer to any real data should be put at the 
    // back.  

    IntermediateData newThing;
    uint threadIndex = gl_GlobalInvocationID.x;
    newThing._globalIndexOfOriginalData = threadIndex;

    if (threadIndex < uOriginalDataBufferSize)
    {
        newThing._data = AllOriginalData[threadIndex]._value;
    }
    else    // >= uOriginalDataBufferSize
    {
        newThing._data = 0xffffffff;
    }

    // this is the beginning of the sorting, so put the values into the first buffer, no 
    // questions asked
    IntermediateDataBuffer[threadIndex] = newThing;
}
