// REQUIRES Version.comp
// REQUIRES ParallelSortConstants.comp
// - PARALLEL_SORT_WORK_GROUP_SIZE_X
// REQUIRES UniformLocations.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES IntermediateSortBuffers.comp
// REQUIRES PrefixScanBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = PARALLEL_SORT_WORK_GROUP_SIZE_X) in;

// also used in SortIntermediateData.comp (different uniform of course because different shader)
layout(location = UNIFORM_LOCATION_BIT_NUMBER) uniform uint uBitNumber;

/*------------------------------------------------------------------------------------------------
Description:
    Grabs a bit from the "read" buffer of the IntermediateSortBuffers and puts it into the 
    PrefixScanBuffer::PrefixSumsWithinGroup array.

    This is part of the Radix Sort algorithm.
Parameters: None
Returns:    None
Creator:    John Cox, 3/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    // extract the bit value, NOT the positional bit value
    // Ex: What is the value of the 3rd bit in 0b101011?
    // The bit value at bit 3 is 0b101011 & 0b001000 = 0b001000 = 8.
    // The positional bit value at bit 3 is (0b101011 >> 3) & 0b000001 = 0b000101 & 0b000001 = 1;
    // Two very different values.  Radix Sort sorts by bit values, not by positional bit values, 
    // so use the second approach.
    // Also Note: The "& 1" is very important.  This is 32bit land (at the time of this demo), 
    // so there are 31 0s to left of the 1, and they will strip off any additional 1s in the 
    // value, leaving just the value of the desired bit.
    uint intermediateDataReadIndex = gl_GlobalInvocationID.x + uIntermediateBufferReadOffset;
    uint bitVal = (IntermediateDataBuffer[intermediateDataReadIndex]._data >> uBitNumber) & 1;

    // Note: Thread count should be the size of the PrefixScanBuffer::PrefixSumsWithinGroup 
    // array, so no special calculations are required for the "write" index.
    PrefixSumsWithinGroup[gl_GlobalInvocationID.x] = bitVal;

    // clear out the PrefixSumsByGroup array
    // Note: This is more than just cleanup.  The ParallelPrefixScan on all the data will only 
    // fill out the per-work-group sum for each work group in use, NOT for each work group that 
    // is NOT in use.  If the sums of the work groups that are not in use are not cleared, then 
    // the subsequent scan of all per-work-group sums will give an erroneous value to 
    // PrefixScanBuffer::totalNumberOfOnes.
    // Also Note: The only thread count guarantee in this shader is that it will be at least the
    // size of 1 work group, so the only work group that is guaranteed to exist is work group 0.
    // Also Also Note: This reset cannot be performed in ParallelPrefixScan.comp because there 
    // is no guaranteed work group launch order.  If I tried to say that, at the beginning of 
    // the parallel prefix scan, work group 0's threads will clean out the PrefixSumsByGroup 
    // array, it may be that (for example) work group 57 will launch before work group 0, so 
    // that work group would record a value in PrefixSumsByGroup[57], but then work group 0 
    // comes along afterwards and sets it to 0.  Whoops.  The only way to guarantee that these 
    // will be set to 0 before running the prefix scan is to set them to 0 in a shader that runs 
    // prior.
    if (gl_WorkGroupID.x == 0)
    {
        // ParallelPrefixScan.comp was designed to work on 2 items per thread (it's the unusual 
        // one), so the PrefixScanBuffer::PrefixSumsByGroup is double the size of the work 
        // group, but this shader only works on 1 item per thread, so need to double the thread 
        // index
        PrefixSumsByGroup[(gl_LocalInvocationID.x * 2)] = 0;
        PrefixSumsByGroup[(gl_LocalInvocationID.x * 2) + 1] = 0;
    }
}
