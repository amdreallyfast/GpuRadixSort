// REQUIRES Version.comp
// REQUIRES ParallelSortConstants.comp
// - PARALLEL_SORT_WORK_GROUP_SIZE_X
// REQUIRES UniformLocations.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES IntermediateSortBuffers.comp
// REQUIRES PrefixScanBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = PARALLEL_SORT_WORK_GROUP_SIZE_X) in;

// also used in GetBitForPrefixScans.comp (different uniform of course because different shader)
layout(location = UNIFORM_LOCATION_BIT_NUMBER) uniform uint uBitNumber;

/*------------------------------------------------------------------------------------------------
Description:
    Uses the Radix Sorting algorithm to sort the IntermediateData structures in the "read" 
    buffer into the "write" buffer from IntermediateSortBuffers using the prefix sums from 
    PrefixScanBuffer.

    This is part of the Radix Sort algorithm.
    Note: As per Radix Sort, the value must remain relative to others with the same value.
    Suppose there is the following data: 0 1 0 0 1 1 0
    The 0s will be gathered to the left and the 1s to the right, but not in just any order.  The 
    first 0 will be on the far left, the second 0 after that, the third 0 after that, and the 
    fourth 0 after that.  Then the first 1, then the second 1, then the third. 

Parameters: None
Returns:    None
Creator:    John Cox, 3/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    // Note: Thread count should be the size of the PrefixScanBuffer::AllPrefixSums array.  
    uint threadIndex = gl_GlobalInvocationID.x;

    // there are only 0s and 1s, so if they weren't counted in the sum, then they are 0s
    uint prefixSumOfOnes = AllPrefixSums[threadIndex];
    uint prefixSumOfZeros = threadIndex - prefixSumOfOnes;
    uint totalNumberOfZeros = uPrefixSumsMaxEntries - totalNumberOfOnes;

    // determines if the value should go with the 0s or with 1s
    uint intermediateDataReadIndex = threadIndex + uIntermediateBufferReadOffset;
    uint bitVal = (IntermediateDataBuffer[intermediateDataReadIndex]._data >> uBitNumber) & 1;

    // Note: If the value being sorted has a 0 at the current bit, then the order of 0s in the 
    // data set is maintained (as per Radix Sort) by the number of 0s that came before the 
    // current value.  If the value being sorted has a 1 at the current bit, then the order is 
    // maintained by the number of 1s that came before it.
    uint destinationIndex = (bitVal == 0) ? prefixSumOfZeros : (totalNumberOfZeros + prefixSumOfOnes);
    destinationIndex += uIntermediateBufferWriteOffset;

    // do the sort
    IntermediateDataBuffer[destinationIndex] = IntermediateDataBuffer[intermediateDataReadIndex];
}
